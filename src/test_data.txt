10
15 15 10 20 20 10 20 20 10 20 ==> 80
  30 5 10 20 10 10 20 10 10
7
90 12 45 90 45 9 90 ==>  135
12   3   45   9  10

6
3000 60 20 20 60 20 ==>  120

7
60 30 20 20 20 20 20 ==> 100


8
30 60 20 20 20 20 60 30  ==>120

7
30 30 60 30 20 20 60 ==>  120

9
60 10 20 20 20 20 20 20 60 ==>  140

####################
50
2000 50000 2000 50000 1000 50000 50000 50000 50000 50000 2000 50000 2000 50000 1000 50000 50000 50000 50000 50000 2000 50000 2000 50000 1000 50000 50000 50000 50000 50000 2000 50000 2000 50000 1000 50000 50000 50000 50000 50000 2000 50000 2000 50000 1000 50000 50000 50000 50000 50000 ==> 250000


10
50 50 50 50 50 50 50 50 50 50  ==>  

##########
13
60 30 70  120 60 30 30 20 20 20 20 20 20 ==> 130
  30 10 10  60  30 30 10 20 20 20 20 20


##########
13
60 30 70  120 60 30 30 30 20 20 20 20 20 ==> 150
  30 10 10  60  30 30 30 20 20 20 20 20


14
180 30 30 30 30 30 300 60 60 60 120 30 10 10 => 360
[
    Mg {
        gcd: 30,
        mg_value: 210,
        len: 7,
    },
    Mg {
        gcd: 60,
        mg_value: 300,
        len: 5,
    },
    Mg {
        gcd: 30,
        mg_value: 60,
        len: 2,
    },
    Mg {
        gcd: 10,
        mg_value: 30,
        len: 3,
    },
]


6
120 60 120 30 10 10 => 180
1

18
10 60 30 30 30 120 60 60 120 20 20 20 20 20 20 20 20 20 => 260

        ¤  ¤  #  ¤  ¤
        \ /\ /\ /\ /
         X  ¤  ¤  X
         \ /\ /\ /
          ¤  ¤  ¤
           \ /\ /
            ¤  ¤
            \ /
             ¤



// optimal go fm 60 to 30 t0 15 

60 => 20 : mg = 260
60 => 30 : mg = 210
60 => 30 => 15: mg = 270
[
    Mg {
        gcd: 15,
        mg_value: 180,
        len: 12,
    },
    Mg {
        gcd: 10,
        mg_value: 100,
        len: 10,
    },
    Mg {
        gcd: 60,
        mg_value: 240,
        len: 4,
    },
    Mg {
        gcd: 20,
        mg_value: 200,
        len: 10,
    },
] 





60=>30=>15 = 255
[
    Mg {
        gcd: 10,
        mg_value: 20,
        len: 2,
    },
    Mg {
        gcd: 15,
        mg_value: 165,
        len: 11,
    },
    Mg {
        gcd: 30,
        mg_value: 150,
        len: 5,
    },
    Mg {
        gcd: 60,
        mg_value: 180,
        len: 3,
    },
    Mg {
        gcd: 20,
        mg_value: 160,
        len: 8,
    },
] 

15<= 60 => 30 => 15 = 27*15 = 405

[
    Mg {
        gcd: 10,
        mg_value: 50,
        len: 5,
    },
    Mg {
        gcd: 15,
        mg_value: 180,
        len: 12,
    },
    Mg {
        gcd: 30,
        mg_value: 120,
        len: 4,
    },
    Mg {
        gcd: 60,
        mg_value: 240,
        len: 4,
    },
    Mg {
        gcd: 15,
        mg_value: 150,
        len: 10,
    },
] 


36
10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 30 30 30 30 60 60 60 60 15 15 15 15 15 15 15 15 15  
10 <= 60 => 30 => 10 =    27 * 10 = 270
[
    Mg {
        gcd: 10,
        mg_value: 150,
        len: 15,
    },
    Mg {
        gcd: 30,
        mg_value: 150,
        len: 5,
    },
    Mg {
        gcd: 60,
        mg_value: 240,
        len: 4,
    },
    Mg {
        gcd: 10,
        mg_value: 100,
        len: 10,
    },
]




270 = 10 * 27
36
10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 30 30 30 30 60 60 60 60 15 15 15 15 15 15 15 15 15 



255 = 17*15
30
10 10 10 10 10 10 10 10 10 10 10 10 10 30 30 30 30 60 60 60 60 15 15 15 15 15 15 15 15 15 



60*2 = 120
[
    Mg {
        gcd: 10,
        mg_value: 70,
        len: 7,
    },
    Mg {
        gcd: 30,
        mg_value: 60,
        len: 2,
    },
    Mg {
        gcd: 60,
        mg_value: 120,
        len: 2,
    },



println!(" for thread {:?} the mg is:{}" , thread::current().id() ,mg_so_far)








 
        mg = max_gcd_indicies
            .iter()
            .map(|max_gcd_ind| {
                let _m = find_mg_flag(&data, *max_gcd_ind);
                _m
            })
            .fold(0, |max, x| if x > max { x } else { max });